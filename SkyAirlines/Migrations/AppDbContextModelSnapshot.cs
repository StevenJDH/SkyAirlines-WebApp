// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkyAirlines.Models;

namespace SkyAirlines.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SkyAirlines.Models.Aircraft", b =>
                {
                    b.Property<int>("AircraftId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AircraftCapacity");

                    b.Property<string>("AircraftModel")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("AircraftId");

                    b.ToTable("Aircrafts");

                    b.HasData(
                        new { AircraftId = 1, AircraftCapacity = 853, AircraftModel = "A380-800" },
                        new { AircraftId = 2, AircraftCapacity = 700, AircraftModel = "747-8" },
                        new { AircraftId = 3, AircraftCapacity = 624, AircraftModel = "747-400" },
                        new { AircraftId = 4, AircraftCapacity = 550, AircraftModel = "777-300" },
                        new { AircraftId = 5, AircraftCapacity = 440, AircraftModel = "777-200" },
                        new { AircraftId = 6, AircraftCapacity = 150, AircraftModel = "A320" },
                        new { AircraftId = 7, AircraftCapacity = 126, AircraftModel = "A319" },
                        new { AircraftId = 8, AircraftCapacity = 192, AircraftModel = "A321" },
                        new { AircraftId = 9, AircraftCapacity = 150, AircraftModel = "A320" },
                        new { AircraftId = 10, AircraftCapacity = 150, AircraftModel = "A320" }
                    );
                });

            modelBuilder.Entity("SkyAirlines.Models.Airport", b =>
                {
                    b.Property<int>("AirportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AirportCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("AirportName")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("AirportId");

                    b.HasIndex("AirportCode")
                        .IsUnique();

                    b.HasIndex("AirportName")
                        .IsUnique();

                    b.ToTable("Airports");

                    b.HasData(
                        new { AirportId = 1, AirportCode = "ATT", AirportName = "Atmautluak" },
                        new { AirportId = 2, AirportCode = "LAS", AirportName = "Mccarran International" },
                        new { AirportId = 3, AirportCode = "AOK", AirportName = "Karpathos" },
                        new { AirportId = 4, AirportCode = "BEO", AirportName = "Belmont" },
                        new { AirportId = 5, AirportCode = "CDG", AirportName = "Charles De Gaulle" },
                        new { AirportId = 6, AirportCode = "DDP", AirportName = "Dorado Beach" },
                        new { AirportId = 7, AirportCode = "ESR", AirportName = "El Salvador" },
                        new { AirportId = 8, AirportCode = "FRF", AirportName = "Rhein-Main AFB" },
                        new { AirportId = 9, AirportCode = "GFK", AirportName = "Grand Forks" },
                        new { AirportId = 10, AirportCode = "HBH", AirportName = "Hobart Bay" }
                    );
                });

            modelBuilder.Entity("SkyAirlines.Models.Flight", b =>
                {
                    b.Property<string>("FlightPrefix")
                        .HasMaxLength(4);

                    b.Property<int>("FlightId");

                    b.Property<int>("AircraftId");

                    b.Property<int>("AirportId");

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("DateTime2");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("DateTime2");

                    b.HasKey("FlightPrefix", "FlightId");

                    b.HasIndex("AircraftId");

                    b.HasIndex("AirportId");

                    b.ToTable("Flights");

                    b.HasData(
                        new { FlightPrefix = "SA", FlightId = 11000, AircraftId = 10, AirportId = 1, Arrival = new DateTime(2017, 7, 1, 19, 50, 0, 0, DateTimeKind.Unspecified), Departure = new DateTime(2017, 6, 1, 17, 20, 0, 0, DateTimeKind.Unspecified) },
                        new { FlightPrefix = "SA", FlightId = 11010, AircraftId = 9, AirportId = 2, Arrival = new DateTime(2017, 7, 1, 18, 45, 0, 0, DateTimeKind.Unspecified), Departure = new DateTime(2017, 7, 1, 16, 15, 0, 0, DateTimeKind.Unspecified) },
                        new { FlightPrefix = "SA", FlightId = 11020, AircraftId = 8, AirportId = 3, Arrival = new DateTime(2017, 7, 1, 17, 40, 0, 0, DateTimeKind.Unspecified), Departure = new DateTime(2017, 7, 1, 15, 10, 0, 0, DateTimeKind.Unspecified) },
                        new { FlightPrefix = "SA", FlightId = 11030, AircraftId = 7, AirportId = 4, Arrival = new DateTime(2017, 7, 1, 17, 50, 0, 0, DateTimeKind.Unspecified), Departure = new DateTime(2017, 7, 1, 14, 5, 0, 0, DateTimeKind.Unspecified) },
                        new { FlightPrefix = "SA", FlightId = 11040, AircraftId = 6, AirportId = 5, Arrival = new DateTime(2017, 7, 1, 18, 55, 0, 0, DateTimeKind.Unspecified), Departure = new DateTime(2017, 7, 1, 13, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { FlightPrefix = "SA", FlightId = 11050, AircraftId = 5, AirportId = 6, Arrival = new DateTime(2017, 7, 2, 19, 0, 0, 0, DateTimeKind.Unspecified), Departure = new DateTime(2017, 7, 2, 12, 35, 0, 0, DateTimeKind.Unspecified) },
                        new { FlightPrefix = "SA", FlightId = 11060, AircraftId = 4, AirportId = 7, Arrival = new DateTime(2017, 7, 2, 20, 10, 0, 0, DateTimeKind.Unspecified), Departure = new DateTime(2017, 7, 2, 11, 30, 0, 0, DateTimeKind.Unspecified) },
                        new { FlightPrefix = "SA", FlightId = 11070, AircraftId = 3, AirportId = 8, Arrival = new DateTime(2017, 7, 2, 21, 15, 0, 0, DateTimeKind.Unspecified), Departure = new DateTime(2017, 7, 2, 10, 25, 0, 0, DateTimeKind.Unspecified) },
                        new { FlightPrefix = "SA", FlightId = 11080, AircraftId = 2, AirportId = 9, Arrival = new DateTime(2017, 7, 2, 22, 10, 0, 0, DateTimeKind.Unspecified), Departure = new DateTime(2017, 7, 2, 9, 20, 0, 0, DateTimeKind.Unspecified) },
                        new { FlightPrefix = "SA", FlightId = 11090, AircraftId = 1, AirportId = 10, Arrival = new DateTime(2017, 7, 2, 23, 25, 0, 0, DateTimeKind.Unspecified), Departure = new DateTime(2017, 7, 2, 8, 15, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("SkyAirlines.Models.Manifest", b =>
                {
                    b.Property<string>("FlightPrefix")
                        .HasMaxLength(4);

                    b.Property<int>("FlightId");

                    b.Property<int>("PassengerId");

                    b.Property<string>("Seat")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.HasKey("FlightPrefix", "FlightId", "PassengerId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Manifests");

                    b.HasData(
                        new { FlightPrefix = "SA", FlightId = 11000, PassengerId = 1, Seat = "A01" },
                        new { FlightPrefix = "SA", FlightId = 11010, PassengerId = 2, Seat = "B02" },
                        new { FlightPrefix = "SA", FlightId = 11020, PassengerId = 3, Seat = "C03" },
                        new { FlightPrefix = "SA", FlightId = 11030, PassengerId = 4, Seat = "D04" },
                        new { FlightPrefix = "SA", FlightId = 11040, PassengerId = 5, Seat = "A10" },
                        new { FlightPrefix = "SA", FlightId = 11050, PassengerId = 6, Seat = "G01" },
                        new { FlightPrefix = "SA", FlightId = 11060, PassengerId = 7, Seat = "H02" },
                        new { FlightPrefix = "SA", FlightId = 11070, PassengerId = 8, Seat = "I03" },
                        new { FlightPrefix = "SA", FlightId = 11080, PassengerId = 9, Seat = "J04" },
                        new { FlightPrefix = "SA", FlightId = 11090, PassengerId = 10, Seat = "K05" }
                    );
                });

            modelBuilder.Entity("SkyAirlines.Models.Passenger", b =>
                {
                    b.Property<int>("PassengerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CheckedBaggage");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("Date");

                    b.Property<string>("Email")
                        .HasMaxLength(254);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("PassengerId");

                    b.ToTable("Passengers");

                    b.HasData(
                        new { PassengerId = 1, CheckedBaggage = true, DOB = new DateTime(1980, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "jdoe@mail.com", FirstName = "John", LastName = "Doe", Passport = "837568289", PhoneNumber = "15005550000" },
                        new { PassengerId = 2, CheckedBaggage = true, DOB = new DateTime(1981, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "jdowers@mail.com", FirstName = "Jenny", LastName = "Dowers", Passport = "385648365", PhoneNumber = "15015550001" },
                        new { PassengerId = 3, CheckedBaggage = true, DOB = new DateTime(1982, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "drow@mail.com", FirstName = "David", LastName = "Row", Passport = "121493498", PhoneNumber = "15025550002" },
                        new { PassengerId = 4, CheckedBaggage = true, DOB = new DateTime(1983, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "ajones@mail.com", FirstName = "Anny", LastName = "Jones", Passport = "982433847", PhoneNumber = "15035550003" },
                        new { PassengerId = 5, CheckedBaggage = true, DOB = new DateTime(1984, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "sjenkins@mail.com", FirstName = "Steven", LastName = "Jenkins", Passport = "999999999", PhoneNumber = "15045550004" },
                        new { PassengerId = 6, CheckedBaggage = true, DOB = new DateTime(1985, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "rdoe@email.com", FirstName = "Rachel ", LastName = "Doe", Passport = "123456789", PhoneNumber = "15055550005" },
                        new { PassengerId = 7, CheckedBaggage = true, DOB = new DateTime(1986, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "fstanly@mail.com", FirstName = "Frank", LastName = "Stanly", Passport = "111111111", PhoneNumber = "15065550006" },
                        new { PassengerId = 8, CheckedBaggage = true, DOB = new DateTime(1987, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "jbowe@mail.com", FirstName = "Jack", LastName = "Bowe", Passport = "101010101", PhoneNumber = "15075550007" },
                        new { PassengerId = 9, CheckedBaggage = true, DOB = new DateTime(1988, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "clake@mail.com", FirstName = "Christina", LastName = "Lake", Passport = "987654321", PhoneNumber = "15085550008" },
                        new { PassengerId = 10, CheckedBaggage = true, DOB = new DateTime(1989, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), Email = "jdivers@mail.com", FirstName = "Jenny", LastName = "Divers", Passport = "567894321", PhoneNumber = "15095550009" }
                    );
                });

            modelBuilder.Entity("SkyAirlines.Models.Flight", b =>
                {
                    b.HasOne("SkyAirlines.Models.Aircraft", "Aircraft")
                        .WithMany("Flights")
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkyAirlines.Models.Airport", "Airport")
                        .WithMany("Flights")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkyAirlines.Models.Manifest", b =>
                {
                    b.HasOne("SkyAirlines.Models.Passenger", "Passenger")
                        .WithMany("Manifests")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SkyAirlines.Models.Flight", "Flight")
                        .WithMany("Manifests")
                        .HasForeignKey("FlightPrefix", "FlightId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
